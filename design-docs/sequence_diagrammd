# AmazonMeal: Sequence Diagrams

This document provides sequence diagrams for key user flows in the AmazonMeal system, illustrating how components interact over time to deliver core functionality.

## 1. User Profile Setup & Preference Capture

```mermaid
sequenceDiagram
    actor User
    participant UI as Frontend UI
    participant APIGateway as API Gateway
    participant UserSvc as User Profile Service
    participant DynamoDB as Users Table
    
    User->>UI: Create profile / Set preferences
    UI->>APIGateway: POST /api/users
    APIGateway->>UserSvc: Create user profile
    UserSvc->>DynamoDB: Store user profile
    DynamoDB-->>UserSvc: Confirm storage
    UserSvc-->>APIGateway: Return profile data
    APIGateway-->>UI: Profile created response
    UI-->>User: Display profile confirmation
    
    Note over User,UI: User sets dietary preferences
    
    User->>UI: Update preferences
    UI->>APIGateway: PATCH /api/users/{id}/preferences
    APIGateway->>UserSvc: Update preferences
    UserSvc->>DynamoDB: Update user record
    DynamoDB-->>UserSvc: Confirm update
    UserSvc-->>APIGateway: Return updated preferences
    APIGateway-->>UI: Preferences updated response
    UI-->>User: Display preferences confirmation
```

## 2. AI-Powered Meal Plan Generation

```mermaid
sequenceDiagram
    actor User
    participant UI as Frontend UI
    participant APIGateway as API Gateway
    participant RecSvc as Recommendation Service
    participant UserSvc as User Profile Service
    participant RecipeSvc as Recipe Service
    participant AIEngine as Meal Recommendation Engine
    participant Bedrock as Amazon Bedrock
    participant UsersDB as Users Table
    participant RecipesDB as Recipes Table
    participant PlansDB as MealPlans Table
    
    User->>UI: Request meal plan generation
    UI->>APIGateway: POST /api/mealplans/generate
    APIGateway->>RecSvc: Generate meal plan
    
    RecSvc->>UserSvc: Get user preferences
    UserSvc->>UsersDB: Query user data
    UsersDB-->>UserSvc: Return preferences
    UserSvc-->>RecSvc: User preferences data
    
    RecSvc->>RecipeSvc: Get available recipes
    RecipeSvc->>RecipesDB: Query recipes
    RecipesDB-->>RecipeSvc: Return matching recipes
    RecipeSvc-->>RecSvc: Recipe dataset
    
    RecSvc->>AIEngine: Request personalized plan
    AIEngine->>Bedrock: Process recommendation query
    Note over AIEngine,Bedrock: Apply AI algorithms based on<br/>preferences, history, and nutrition
    Bedrock-->>AIEngine: Recommendation results
    AIEngine-->>RecSvc: Personalized meal plan
    
    RecSvc->>PlansDB: Store generated meal plan
    PlansDB-->>RecSvc: Confirm storage
    RecSvc-->>APIGateway: Return meal plan data
    APIGateway-->>UI: Meal plan response
    UI-->>User: Display personalized meal plan
    
    Note over User,UI: User can modify suggested plan
    
    User->>UI: Modify meal plan
    UI->>APIGateway: PATCH /api/mealplans/{id}
    APIGateway->>RecSvc: Update meal plan
    RecSvc->>PlansDB: Update stored plan
    PlansDB-->>RecSvc: Confirm update
    RecSvc-->>APIGateway: Return updated plan
    APIGateway-->>UI: Updated plan response
    UI-->>User: Display updated meal plan
```

## 3. Shopping List Generation & Cart Management

```mermaid
sequenceDiagram
    actor User
    participant UI as Frontend UI
    participant APIGateway as API Gateway
    participant ShopSvc as Shopping Service
    participant RecSvc as Recommendation Service
    participant SubEngine as Substitution Engine
    participant Bedrock as Amazon Bedrock
    participant PlansDB as MealPlans Table
    participant ProductsDB as Products Table
    participant ListsDB as ShoppingLists Table
    participant FreshAPI as Mock Amazon Fresh API
    
    User->>UI: Generate shopping list from meal plan
    UI->>APIGateway: POST /api/shopping/lists
    APIGateway->>ShopSvc: Create shopping list
    
    ShopSvc->>RecSvc: Get meal plan details
    RecSvc->>PlansDB: Query meal plan
    PlansDB-->>RecSvc: Return meal plan data
    RecSvc-->>ShopSvc: Meal plan with recipes
    
    ShopSvc->>ProductsDB: Match ingredients to products
    ProductsDB-->>ShopSvc: Product matches
    
    ShopSvc->>SubEngine: Check product availability
    SubEngine->>FreshAPI: Check inventory
    FreshAPI-->>SubEngine: Inventory status
    
    Note over SubEngine,Bedrock: For unavailable items,<br/>find smart substitutions
    SubEngine->>Bedrock: Process substitution request
    Bedrock-->>SubEngine: Substitution options
    SubEngine-->>ShopSvc: Available products with substitutions
    
    ShopSvc->>ListsDB: Store shopping list
    ListsDB-->>ShopSvc: Confirm storage
    ShopSvc-->>APIGateway: Return shopping list
    APIGateway-->>UI: Shopping list response
    UI-->>User: Display optimized shopping list
    
    Note over User,UI: User adds items to cart
    
    User->>UI: Add all to cart
    UI->>APIGateway: POST /api/shopping/cart
    APIGateway->>ShopSvc: Add items to cart
    ShopSvc->>FreshAPI: Add to Amazon Fresh cart
    FreshAPI-->>ShopSvc: Cart update confirmation
    ShopSvc-->>APIGateway: Return cart status
    APIGateway-->>UI: Cart updated response
    UI-->>User: Display cart confirmation
```

## 4. Voice-Enabled Interaction Flow

```mermaid
sequenceDiagram
    actor User
    participant UI as Frontend UI
    participant VoiceComp as Voice Component
    participant APIGateway as API Gateway
    participant VoiceSvc as Voice Processing Service
    participant Bedrock as Amazon Bedrock
    participant VoiceProc as Voice Command Processor
    participant RecSvc as Recommendation Service
    participant ShopSvc as Shopping Service
    
    User->>VoiceComp: "Create a meal plan for the week"
    VoiceComp->>VoiceComp: Capture audio
    VoiceComp->>APIGateway: POST /api/voice/process (audio)
    APIGateway->>VoiceSvc: Process voice command
    
    VoiceSvc->>VoiceProc: Interpret command
    VoiceProc->>Bedrock: Natural language processing
    Bedrock-->>VoiceProc: Command interpretation
    VoiceProc-->>VoiceSvc: Structured command
    
    alt Meal Plan Command
        VoiceSvc->>RecSvc: Generate meal plan
        Note right of RecSvc: Follow meal plan<br/>generation flow
        RecSvc-->>VoiceSvc: Meal plan data
    else Shopping Command
        VoiceSvc->>ShopSvc: Process shopping request
        Note right of ShopSvc: Follow shopping<br/>list flow
        ShopSvc-->>VoiceSvc: Shopping result
    end
    
    VoiceSvc-->>APIGateway: Voice command result
    APIGateway-->>UI: Command response
    UI-->>User: Display results and voice confirmation
    
    Note over UI,User: "I've created your meal plan for the week"
```

These sequence diagrams illustrate the key interaction flows in the AmazonMeal system, highlighting how the various components work together to deliver the core functionality. The diagrams focus particularly on how AI/ML capabilities are integrated throughout the user experience to provide personalization and intelligent assistance.

The diagrams are designed to guide the hackathon team in implementing the most important user journeys while maintaining a clear understanding of component responsibilities and interactions.